/*
 * Copyright (c) 2025 CrudCraft contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package nl.datasteel.crudcraft.sample.account;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import nl.datasteel.crudcraft.annotations.classes.CrudCrafted;
import nl.datasteel.crudcraft.annotations.fields.Dto;
import nl.datasteel.crudcraft.annotations.fields.Request;
import nl.datasteel.crudcraft.annotations.fields.Searchable;
import nl.datasteel.crudcraft.annotations.security.RowSecurity;
import nl.datasteel.crudcraft.runtime.extensions.AuditableExtension;
import nl.datasteel.crudcraft.sample.branch.Branch;
import nl.datasteel.crudcraft.sample.customer.AccountHolder;
import nl.datasteel.crudcraft.sample.enums.AccountStatus;
import nl.datasteel.crudcraft.sample.security.AccountSecurityPolicy;
import nl.datasteel.crudcraft.sample.security.OwnBranchRowSecurityHandler;
import nl.datasteel.crudcraft.sample.security.OwnAccountRowSecurityHandler;
import nl.datasteel.crudcraft.sample.security.OwnTenantRowSecurityHandler;
import nl.datasteel.crudcraft.sample.tenant.Tenant;
import nl.datasteel.crudcraft.sample.validator.ClosableAccount;
import nl.datasteel.crudcraft.sample.validator.ValidIbanNl;

/**
 * Bank account belonging to a tenant.
 * Shows CrudCraft features like the {@link nl.datasteel.crudcraft.sample.security.AccountSecurityPolicy}
 * and custom validators {@link nl.datasteel.crudcraft.sample.validator.ValidIbanNl} and
 * {@link nl.datasteel.crudcraft.sample.validator.ClosableAccount}.
 */
@ClosableAccount
@CrudCrafted(editable = false, securityPolicy = AccountSecurityPolicy.class)
@RowSecurity(handlers = {OwnTenantRowSecurityHandler.class, OwnBranchRowSecurityHandler.class, OwnAccountRowSecurityHandler.class})
@Entity
@Table(name = "accounts")
public class Account {

    /**
     * Primary key generated by the database. Exposed in DTOs but immutable to
     * clients because it lacks the {@link Request} annotation.
     */
    @Dto
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(nullable = false, updatable = false)
    private UUID id;

    /**
     * Tenant that owns this account. Security policies can leverage this to
     * restrict cross-tenant access.
     */
    @Dto
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "tenant_id", nullable = false)
    private Tenant tenant;

    /**
     * Branch in which the account resides. Included so queries can filter by
     * branch through CrudCraft's generated endpoints.
     */
    @Dto
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "branch_id", nullable = false)
    private Branch branch;

    /**
     * International Bank Account Number. Marked as {@link Request} for writes,
     * {@link Searchable} to enable API filtering and validated by the
     * {@link ValidIbanNl} annotation.
     */
    @Dto({"List"})
    @Request
    @Searchable
    @Column(nullable = false, unique = true, length = 34)
    @ValidIbanNl
    private String iban;

    /**
     * Current lifecycle state of the account stored as an enum. Exposed in the
     * DTO so clients can react to changes.
     */
    @Dto
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private AccountStatus status = AccountStatus.ACTIVE;

    /**
     * Monetary balance of the account. Using a precise decimal column ensures
     * CrudCraft serializes values accurately.
     */
    @Dto
    @Column(name = "current_balance", nullable = false, precision = 19, scale = 4)
    private BigDecimal currentBalance = BigDecimal.ZERO;

    /**
     * ISO currency code of the account. Read-only but included in the DTO for
     * completeness.
     */
    @Dto
    @Column(nullable = false, length = 3)
    private String currency = "EUR";

    /**
     * Optional one-to-one limits entity. CrudCraft cascades persistence so the
     * associated {@link AccountLimits} is managed automatically.
     */
    @Dto
    @OneToOne(mappedBy = "account", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private AccountLimits limits;

    /**
     * Relationship to account holders. The collection is copied in getters and
     * setters to guard against external modification.
     */
    @Dto
    @OneToMany(mappedBy = "account", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<AccountHolder> holders = new HashSet<>();

    /**
     * Embedded auditing fields automatically populated by CrudCraft to record
     * creation and modification timestamps.
     */
    @Embedded
    private AuditableExtension audit = new AuditableExtension();

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public Tenant getTenant() {
        return tenant;
    }

    public void setTenant(Tenant tenant) {
        this.tenant = tenant;
    }

    public Branch getBranch() {
        return branch;
    }

    public void setBranch(Branch branch) {
        this.branch = branch;
    }

    public String getIban() {
        return iban;
    }

    public void setIban(String iban) {
        this.iban = iban;
    }

    public AccountStatus getStatus() {
        return status;
    }

    public void setStatus(AccountStatus status) {
        this.status = status;
    }

    public BigDecimal getCurrentBalance() {
        return currentBalance;
    }

    public void setCurrentBalance(BigDecimal currentBalance) {
        this.currentBalance = currentBalance;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public AccountLimits getLimits() {
        return limits;
    }

    public void setLimits(AccountLimits limits) {
        this.limits = limits;
    }

    public Set<AccountHolder> getHolders() {
        return holders == null ? Set.of() : Set.copyOf(holders);
    }

    public void setHolders(Set<AccountHolder> holders) {
        this.holders = holders == null ? new HashSet<>() : new HashSet<>(holders);
    }

    public AuditableExtension getAudit() {
        return audit;
    }

    public void setAudit(AuditableExtension audit) {
        this.audit = audit;
    }
}
