/*
 * Copyright (c) 2025 CrudCraft contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package nl.datasteel.crudcraft.sample.customer;

import jakarta.persistence.*;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import nl.datasteel.crudcraft.annotations.classes.CrudCrafted;
import nl.datasteel.crudcraft.annotations.fields.Dto;
import nl.datasteel.crudcraft.annotations.fields.Request;
import nl.datasteel.crudcraft.annotations.fields.Searchable;
import nl.datasteel.crudcraft.annotations.security.RowSecurity;
import nl.datasteel.crudcraft.runtime.extensions.AuditableExtension;
import nl.datasteel.crudcraft.runtime.extensions.SoftDeleteExtension;
import nl.datasteel.crudcraft.sample.enums.CustomerStatus;
import nl.datasteel.crudcraft.sample.tenant.Tenant;
import nl.datasteel.crudcraft.sample.security.OwnTenantRowSecurityHandler;

/**
 * Customer owning accounts. Demonstrates soft deletes and one-to-one/one-to-many
 * relations generated by CrudCraft.
 */
@CrudCrafted(editable = false)
@RowSecurity(handlers = OwnTenantRowSecurityHandler.class)
@Entity
@Table(name = "customers")
public class Customer {

    /**
     * Primary key for the customer. Generated UUIDs prevent enumeration of
     * customers across tenants.
     */
    @Dto
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(nullable = false, updatable = false)
    private UUID id;

    /**
     * Tenant owning the customer. Used by security policies to enforce
     * isolation between tenants.
     */
    @Dto
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "tenant_id", nullable = false)
    private Tenant tenant;

    /**
     * Display name. Marked {@link Request} and {@link Searchable} to allow
     * creation and lookup by name.
     */
    @Dto
    @Request
    @Searchable
    @Column(nullable = false)
    private String name;

    /**
     * Unique email address for contacting the customer.
     */
    @Dto
    @Request
    @Column(nullable = false, unique = true)
    private String email;

    /**
     * Status of the customer account such as ACTIVE or SUSPENDED.
     */
    @Dto
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private CustomerStatus status = CustomerStatus.ACTIVE;

    /**
     * Know Your Customer profile linked one-to-one. CrudCraft cascades changes
     * so updating the customer will also manage the profile.
     */
    @Dto
    @OneToOne(mappedBy = "customer", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private KycProfile kycProfile;

    /**
     * Links to accounts the customer holds. The collection is copied to keep
     * entity encapsulation intact.
     */
    @Dto
    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<AccountHolder> accountHolders = new HashSet<>();

    /**
     * Standard auditing fields filled automatically by CrudCraft.
     */
    @Embedded
    private AuditableExtension audit = new AuditableExtension();

    /**
     * Soft delete extension adds a deleted flag and timestamp; CrudCraft will
     * filter out deleted records by default.
     */
    @Embedded
    private SoftDeleteExtension softDelete = new SoftDeleteExtension();
    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public Tenant getTenant() {
        return tenant;
    }

    public void setTenant(Tenant tenant) {
        this.tenant = tenant;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public CustomerStatus getStatus() {
        return status;
    }

    public void setStatus(CustomerStatus status) {
        this.status = status;
    }

    public KycProfile getKycProfile() {
        return kycProfile;
    }

    public void setKycProfile(KycProfile kycProfile) {
        this.kycProfile = kycProfile;
    }

    public Set<AccountHolder> getAccountHolders() {
        return accountHolders == null ? Set.of() : Set.copyOf(accountHolders);
    }

    public void setAccountHolders(Set<AccountHolder> accountHolders) {
        this.accountHolders = accountHolders == null ? new HashSet<>() : new HashSet<>(accountHolders);
    }

    public AuditableExtension getAudit() {
        return audit;
    }

    public void setAudit(AuditableExtension audit) {
        this.audit = audit;
    }

    public SoftDeleteExtension getSoftDelete() {
        return softDelete;
    }

    public void setSoftDelete(SoftDeleteExtension softDelete) {
        this.softDelete = softDelete;
    }
}
