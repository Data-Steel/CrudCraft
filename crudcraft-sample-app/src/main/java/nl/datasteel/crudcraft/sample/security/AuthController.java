/*
 * Copyright (c) 2025 CrudCraft contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package nl.datasteel.crudcraft.sample.security;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import nl.datasteel.crudcraft.sample.user.User;
import nl.datasteel.crudcraft.sample.user.repository.UserRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Very simple authentication controller exposing a login endpoint.
 * Uses CrudCraft-generated repository and mapper components to authenticate
 * demo users.
 */
@RestController
@RequestMapping("/auth")
public class AuthController {
    /** Repository generated by CrudCraft used to look up users. */
    private final UserRepository userRepository;
    /** Symmetric signing key configured for JWT generation. */
    private final String jwtSecret;

    public AuthController(UserRepository userRepository,
                          @Value("${crudcraft.security.jwt.secret}") String jwtSecret) {
        Assert.isTrue(jwtSecret.length() >= 32, "JWT secret must be at least 32 characters");
        this.userRepository = userRepository;
        this.jwtSecret = jwtSecret;
    }

    /**
     * Authenticates a demo user and issues a short-lived JWT token. The token
     * carries the user's roles and expires in one day, so it can be used for
     * manual testing. Doesn't use PasswordEncoder or other security features
     * because that would make logging in more complex than necessary for a demo.
     */
    @PostMapping("/login")
    @PreAuthorize("permitAll()")
    public ResponseEntity<LoginResponse> login(@RequestBody LoginRequest request) {
        return userRepository.findByUsername(request.username())
                .filter(user -> user.getPasswordHash().equals(request.password()))
                .map(this::createToken)
                .map(token -> {
                    String msg = "Include this token as 'Bearer <token>' in the Authorization header. "
                            + "It remains valid for 1 day; login again afterwards.";
                    return ResponseEntity.ok(new LoginResponse(token, msg));
                })
                .orElseGet(() -> ResponseEntity.status(HttpStatus.UNAUTHORIZED).build());
    }

    /**
     * Builds a JWT containing username and roles using the configured secret.
     */
    private String createToken(User user) {
        Instant expiry = Instant.now().plus(1, ChronoUnit.DAYS);

        var roles = user.getRoles().stream()
                .map(Enum::name)
                .toList();

        return JWT.create()
                .withSubject(user.getUsername())
                .withClaim("roles", roles)
                .withExpiresAt(Date.from(expiry))
                .sign(Algorithm.HMAC256(jwtSecret));
    }
}
